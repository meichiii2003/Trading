use rdkafka::config::ClientConfig;
use rdkafka::consumer::{Consumer, StreamConsumer};
use rdkafka::Message;
use serde::Deserialize;
use std::collections::HashMap;
use tokio::sync::RwLock;
use tokio_stream::StreamExt;

use crate::models::PriceUpdate;

pub async fn run_consumer(
    price_tx: tokio::sync::broadcast::Sender<PriceUpdate>,
    price_store: Arc<RwLock<HashMap<String, f64>>>, // Shared storage for price updates
) {
    // Initialize the Kafka consumer
    let consumer: StreamConsumer = ClientConfig::new()
        .set("group.id", "stock-price-consumer-group")
        .set("bootstrap.servers", "localhost:9092")
        .set("auto.offset.reset", "earliest")
        .set("enable.auto.commit", "true")
        .create()
        .expect("Consumer creation failed");

    // Subscribe to the 'stock' topic
    consumer.subscribe(&["stock"]).expect("Can't subscribe to specified topic");

    println!("Consumer started, waiting for batch messages...");

    let mut message_stream = consumer.stream();

    // Continuously consume messages
    while let Some(message) = message_stream.next().await {
        match message {
            Ok(m) => {
                if let Some(payload) = m.payload() {
                    // Display raw payload
                    println!("Raw Batch Payload: {}", String::from_utf8_lossy(payload));

                    // Deserialize the payload to a Vec<PriceUpdate>
                    match serde_json::from_slice::<Vec<PriceUpdate>>(payload) {
                        Ok(batch) => {
                            println!("Received Batch of Price Updates:");

                            // Write updates to the shared price store
                            {
                                let mut store = price_store.write().await;

                                for price_update in batch {
                                    println!(
                                        "  - Stock: {}, Price: {:.2}",
                                        price_update.name, price_update.price
                                    );

                                    // Update or insert the price in the store
                                    store.insert(price_update.name.clone(), price_update.price);

                                    // Broadcast to brokers
                                    if let Err(e) = price_tx.send(price_update.clone()) {
                                        eprintln!("Failed to broadcast price update: {:?}", e);
                                    }
                                }
                            }

                            // Display the updated store for debugging
                            {
                                let store = price_store.read().await;
                                println!("Updated Price Store: {:?}", store);
                            }
                        }
                        Err(e) => {
                            eprintln!("Error deserializing batch message: {:?}", e);
                        }
                    }
                }
            }
            Err(e) => {
                eprintln!("Error while consuming from stream: {:?}", e);
            }
        }
    }
}
