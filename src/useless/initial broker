    // broker/broker.rs

    use tokio::sync::{broadcast::Receiver, Mutex};
    use std::collections::HashMap;
    use std::sync::Arc;
    use crate::models::PriceUpdate;
    use crate::broker::client::Client;
    
    pub struct Broker {
        pub id: u64,
        clients: Vec<Arc<Mutex<Client>>>,
        price_rx: Receiver<PriceUpdate>, // Broadcast receiver for stock updates
    }
    
    impl Broker {
        pub fn new(id: u64, price_tx: tokio::sync::broadcast::Sender<PriceUpdate>) -> Self {
            // Initialize clients
            let mut clients = Vec::new();
    
            // Each broker handles 3 fixed clients
            let start_client_id = (id - 1) * 3 + 1;
            let end_client_id = id * 3;
    
            for client_id in start_client_id..=end_client_id {
                let client = Arc::new(Mutex::new(Client::new(client_id)));
                clients.push(client);
            }
    
            Self {
                id,
                clients,
                price_rx: price_tx.subscribe(), // Subscribe to the broadcast channel
            }
        }
    
        pub async fn start(
            &mut self,
            total_brokers: u64,
            total_updates: u64,
            tracker: Arc<Mutex<HashMap<u64, usize>>>,
            barrier: Arc<tokio::sync::Barrier>, // Synchronization barrier
        ) {
            let clients = self.clients.clone();
            let id = self.id;
            let mut price_rx = self.price_rx.resubscribe();
            
            // Task to process price updates
            tokio::spawn({
                let tracker_clone = tracker.clone();
                let barrier_clone = barrier.clone();
    
                async move {
                    while let Ok(price_update) = price_rx.recv().await {
                        barrier_clone.wait().await; // Synchronize before processing
    
                        // Process price updates for all clients
                        for client in &clients {
                            let mut client = client.lock().await;
                            client.handle_price_update(&price_update).await;
                        }
    
                        // Update tracker
                        {
                            let mut tracker_guard = tracker_clone.lock().await; // Lock the tracker
                            let counter = tracker_guard.entry(id).or_insert(0);// Increment the counter for the broker
                            *counter += 1;// Increment the counter for the broker
    
                            println!(
                                "Broker {} processed price update: {:?} (Tracker count: {})",
                                id, price_update, counter
                            );
    
                            // Check if all brokers have completed processing
                            if tracker_guard.len() == total_brokers as usize
                                && tracker_guard.values().all(|&count| count == total_updates as usize)
                            {
                                println!("All brokers received all price updates for the batch.");
                                tracker_guard.clear();
                            }
                        }
    
                        barrier_clone.wait().await; // Synchronize after processing
                    }
                }
            });
    
            // Main broker loop for generating orders
            loop {
                for client in &self.clients {
                    let mut client = client.lock().await;
                    client.generate_order().await;
                }
    
                tokio::time::sleep(tokio::time::Duration::from_secs(5)).await;
            }
        }
    }
    