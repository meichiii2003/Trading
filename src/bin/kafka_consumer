use rdkafka::config::ClientConfig;
use rdkafka::consumer::{Consumer, StreamConsumer};
use rdkafka::Message;
use serde::{Serialize, Deserialize};
use tokio;
use futures::StreamExt;

#[derive(Deserialize, Debug)]
struct PriceUpdate {
    symbol: String,
    price: f64,
    timestamp: i64,
}

#[tokio::main]
async fn main() {
    // Initialize the Kafka consumer
    let consumer: StreamConsumer = ClientConfig::new()
        .set("group.id", "stock-price-consumer-group")
        .set("bootstrap.servers", "localhost:9092") // Connect to Kafka broker
        .set("auto.offset.reset", "latest") // Start reading from the earliest message
        .set("enable.auto.commit", "true") // Enable auto commit
        .set("debug", "all") // Enable debug logs
        .create()
        .expect("Consumer creation failed");

    // Subscribe to the 'stock_prices' topic
    consumer.subscribe(&["stock"]).expect("Can't subscribe to specified topic");

    println!("Consumer started, waiting for messages...");

    let mut stream_consumer = consumer.stream(); // Get the consumer stream
    println!("Consumer started");
    // Continuously consume messages
    while let Some(message) = stream_consumer.next().await {
        println!("Received message");
        match message {
            Ok(m) => {
                if let Some(payload) = m.payload() {
                    println!("Raw message payload: {}", String::from_utf8_lossy(payload));

                    // Deserialize the payload to the PriceUpdate struct
                    match serde_json::from_slice::<PriceUpdate>(payload) {
                        Ok(price_update) => {
                            println!("Received price update: {:?}", price_update);
                        },
                        Err(e) => {
                            eprintln!("Error deserializing message: {:?}", e);
                        }
                    }
                }
            },
            Err(e) => {
                eprintln!("Error while consuming from stream: {:?}", e);
            }
        }
    }
}
